#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подготавливает данные для многопоточной обработки.
// 
// Параметры:
// 	Коллекция - Предположительно любая коллекция, которую можно обойти "Для Каждого...".
// 
// Возвращаемое значение:
// 	Структура - Массив - Структур. См. хе_Многопоточка.СтруктураПараметровВызова().
//
Функция ПреобразоватьВМассивСтруктур(Коллекция) Экспорт
	
	Результат = Новый Массив(Коллекция.Количество());
	ИндексРезультата = 0;
	
	Если ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда
		
		Для Каждого Строка Из Коллекция Цикл
			
			МассивСтроки = Новый Массив;
			Для Каждого ЗначениеКолонки Из Строка Цикл
				МассивСтроки.Добавить(ЗначениеКолонки);
			КонецЦикла;		
			
			Результат[ИндексРезультата] = СтруктураПараметровВызова(ИндексРезультата, МассивСтроки);
			ИндексРезультата = ИндексРезультата + 1;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Значение Из Коллекция Цикл
			
			МассивСтроки = Новый Массив;
			Если ТипЗнч(Значение) = Тип("Структура")
		         Или ТипЗнч(Значение) = Тип("Соответствие") Тогда
				 
				Для Каждого КлючЗначение Из Значение Цикл
					 МассивСтроки.Добавить(КлючЗначение.Значение);
				КонецЦикла;
				 
			Иначе
				Для Каждого ЗначениеЗначения Из Значение Цикл
					МассивСтроки.Добавить(ЗначениеЗначения);
				КонецЦикла;
				МассивСтроки.Добавить(Значение);
			КонецЕсли;
			
			Результат[ИндексРезультата] = СтруктураПараметровВызова(ИндексРезультата, МассивСтроки);
			ИндексРезультата = ИндексРезультата + 1;
		КонецЦикла;	
		
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

// Запускает указанную процедуру в несколько потоков через фоновые задания.
// 
// Параметры:
// 	ПутьПроцедуры - Строка - Полный путь вызываемой процедуры или функции. Обычно это "ИмяМодуля.ИмяПроцедуры".
// 	ЭтоФункция - Булево - Способ вызова процедуры. Как процедуры или как функции..
// 	МассивСтруктурПараметров - Массив - Массив структур, скорее всего подоготовленный функцией ПреобразоватьВМассивСтруктур(Коллекция).
// 	КоличествоПотоков - Число - Максимальное количество запущенных фоновых заданий..
// 	ТаймаутФонового - Число - Количество секунд, которое будет работать фоновое задание
//                    и после которого оно не будет обрабатывать оставшиеся элементы задания.  
//                    Т.е. если в фоновое было передано 10 элементов, 
//                    но если после обработки 6-го время превысило ТаймаутФонового, то фоновое будет завершено.
// 	КоличествоВПорции - Число - Количество элементов из задания, которое будет передаваться в фоновое задание на выполнение.
// 	ЧастотаОпросаФоновых - Число - Как часто будут опрашиваться запущенные фоновые задания на предмет готовности.
// 	КоличествоПопыток - Число - Если из целевой процедуры при выполнении пришло исключение, то такое задание не считается выполненным. 
//                      И будет запущенно еще раз, но всего запусков будет не более чем КоличествоПопыток. 
//                      Если падает само фоновое, то все элементы, которые были в нем, 
//                      считаются неудачным выполнением и будут запущены еще раз при наличии попыток.
// 	ОтчетОВыполненныхПотоках - ТаблицаЗначений - Параметры запуска фоновых заданий. См. ТаблицаСФоновымиЗаданиями.
// 
// Возвращаемое значение:
// 	Структура - Массив - Структур. Дополненный результатами работы параметр МассивСтруктурПараметров. 
//              См. хе_Многопоточка.СтруктураПараметровВызова().
//
Функция Запустить(ПутьПроцедуры, 
				  ЭтоФункция, 
				  МассивСтруктурПараметров, // [] из СтруктураПараметровВызова()  
				  КоличествоПотоков, 
				  ТаймаутФонового = 30,
				  КоличествоВПорции = 10, // но таймаут важнее
				  ЧастотаОпросаФоновых = 10,
				  КоличествоПопыток = 2,
				  НомерКолонкиСОтветом = Неопределено,
				  ОтчетОВыполненныхПотоках = Неопределено) Экспорт
				  
	Если ТранзакцияАктивна() Тогда
		ВызватьИсключение "Недопустим вызов в транзакции";
	КонецЕсли;
	
	СвободныеНомераПотоков = Новый Массив; // Для красоты в диаграмме ганта, практического смысла нет
	Для Индекс = 1 По КоличествоПотоков Цикл
		СвободныеНомераПотоков.Вставить(Индекс, Истина); // все свободны в начале	
	КонецЦикла;	
	
	СписокПотоков      = ТаблицаСФоновымиЗаданиями(0);
	ОтработанныеПотоки = ТаблицаСФоновымиЗаданиями(0);
	
	ТекущийНеобработанный = 0; // указывает на позицию в МассивМассивовПараметров
	ПотокиКУдалению = Новый Массив;
	ЕстьНеотработанные    = Истина;
	
	Пока ЕстьНеотработанные Цикл
		
		ЕстьНеотработанные = Ложь;
		ПотокиКУдалению.Очистить();
			
		Для Каждого АктивноеФоновое Из СписокПотоков Цикл
			
			Задание = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("УникальныйИдентификатор", АктивноеФоновое.Идентификатор));
			Если Задание.Количество() = 0 Тогда // считаем, что все данные не обработаны
				АктивноеФоновое.Статус = "Неизвестно" ;
				ПотокиКУдалению.Добавить(АктивноеФоновое);
			ИначеЕсли Задание[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
				АктивноеФоновое.Статус = "Активно";
				ЕстьНеотработанные = Истина;
			Иначе // !!! все таки каждое надо отдельно, с завершено, с ошибкой и прочее 
				АктивноеФоновое.Статус = Строка(Задание[0].Состояние); //"Завершено, ЗавершеноАварийно, Отменено";
				АктивноеФоновое.ВремяОкончания = Задание[0].Конец;
				АктивноеФоновое.Длительность = АктивноеФоновое.ВремяОкончания - АктивноеФоновое.ВремяНачала;
				ПотокиКУдалению.Добавить(АктивноеФоновое);
			КонецЕсли;		
			
		КонецЦикла;	
		
		Для Каждого ПотокКУдалению Из ПотокиКУдалению Цикл
			// Считать ответы, удалить из активных потоков
			Попытка
				РезультатФонового  = ПолучитьИзВременногоХранилища(ПотокКУдалению.ХранилищеРезультата); // [] из СтруктураПараметровВызова()
				УдалитьИзВременногоХранилища(ПотокКУдалению.ХранилищеРезультата);
				
				Для Каждого ПараметрФонового Из РезультатФонового Цикл
					ИсходныйИндекс = ПараметрФонового.ИсходныйИндекс;
					Если ПараметрФонового.Исполнено Тогда	
						МассивСтруктурПараметров[ИсходныйИндекс].Исполнено       = Истина;
						ПотокКУдалению.КоличествоИсполненных = ПотокКУдалению.КоличествоИсполненных + 1;
					ИначеЕсли НЕ ПараметрФонового.ПолученоИсключение Тогда // попытки выполнения не было, сминусуем
						МассивСтруктурПараметров[ИсходныйИндекс].Попытки = МассивСтруктурПараметров[ИсходныйИндекс].Попытки - 1; // рискуем зациклиться
					КонецЕсли;
					МассивСтруктурПараметров[ИсходныйИндекс].Результат       = ПараметрФонового.Результат;
					МассивСтруктурПараметров[ИсходныйИндекс].ВремяВыполнения = ПараметрФонового.ВремяВыполнения;
					МассивСтруктурПараметров[ИсходныйИндекс].ВРаботе         = Ложь;
				КонецЦикла;   
									
			Исключение
				Инфо = ИнформацияОбОшибке(); 
				ЗаписьЖурналаРегистрации("хе_многопоточка",
									 УровеньЖурналаРегистрации.Ошибка,,,
									 "Ошибка получения результата работы фонового: " + ПодробноеПредставлениеОшибки(Инфо));
									 
				// всем параметрам +1 к попыткам
				Для Каждого ИндексПараметров Из ПотокКУдалению.МассивИндексов Цикл
					МассивСтруктурПараметров[ИндексПараметров].ВРаботе   = Ложь;
					МассивСтруктурПараметров[ИндексПараметров].Результат = КраткоеПредставлениеОшибки(Инфо);
				КонецЦикла;
			КонецПопытки;			
			
			ЗаполнитьЗначенияСвойств(ОтработанныеПотоки.Добавить(), ПотокКУдалению);
			СвободныеНомераПотоков[ПотокКУдалению.НомерПотока] = Истина;
			СписокПотоков.Удалить(ПотокКУдалению);			
		КонецЦикла;
	
		ОсталосьДобавить = КоличествоПотоков - СписокПотоков.Количество();
		
		Для Инд = 1 По ОсталосьДобавить Цикл
		
			ИнфоОПорцииДанных = СледующаяПорцияДляОбработки(МассивСтруктурПараметров, КоличествоВПорции, КоличествоПопыток); // Порция и МассивИндексов 
			// Это уже будет массив с параметрами, в конце адрес результата
			Если ИнфоОПорцииДанных.ПорцияДанных.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
						
			ХранилищеРезультата = ПоместитьВоВременноеХранилище(Неопределено);
		
			ПараметрыФонового = Новый Массив;
			ПараметрыФонового.Добавить(ПутьПроцедуры);
			ПараметрыФонового.Добавить(ЭтоФункция);
			ПараметрыФонового.Добавить(ИнфоОПорцииДанных.ПорцияДанных);
			ПараметрыФонового.Добавить(ТаймаутФонового);
			ПараметрыФонового.Добавить(ХранилищеРезультата);
			ПараметрыФонового.Добавить(НомерКолонкиСОтветом);
						       
			НовоеЗадание = ФоновыеЗадания.Выполнить(
										"хе_Многопоточка.Поток", 
										ПараметрыФонового,,
										"(хе_Многопоточка) Многопоточное выплнение " + ПутьПроцедуры);
			
			НоваяСтрокаПотока                       = СписокПотоков.Добавить();
			НоваяСтрокаПотока.Идентификатор         = НовоеЗадание.УникальныйИдентификатор;
			НоваяСтрокаПотока.Статус                = "Активно";
			НоваяСтрокаПотока.ВремяНачала           = ТекущаяДатаСеанса();
			НоваяСтрокаПотока.РазмерПорции          = ИнфоОПорцииДанных.ПорцияДанных.Количество();
			НоваяСтрокаПотока.КоличествоИсполненных = 0;
			НоваяСтрокаПотока.ХранилищеРезультата   = ХранилищеРезультата;
			НоваяСтрокаПотока.МассивИндексов        = ИнфоОПорцииДанных.МассивИндексов;
			
			НоваяСтрокаПотока.НомерПотока = ПолучитьНомерСвободногоПотока(СвободныеНомераПотоков, КоличествоПотоков);
			
			ЕстьНеотработанные = Истина;
			
		КонецЦикла;
		
		Если ЕстьНеотработанные Тогда
			Пауза(ЧастотаОпросаФоновых);
		КонецЕсли;
			
	КонецЦикла;
	
	ОтчетОВыполненныхПотоках = ОтработанныеПотоки; 
	
	Возврат МассивСтруктурПараметров;
	
КонецФункции

// Процедура, которая будет запускаться в фоновом задании.
// 
// Параметры:
// 	ПутьПроцедуры - Строка - Полный путь вызываемой процедуры или функции. Обычно это "ИмяМодуля.ИмяПроцедуры".
// 	ЭтоФункция - Булево - Способ вызова процедуры. Как процедуры или как функции..
// 	МассивСтруктурПараметров - Массив - часть массива структур, скорее всего подоготовленной функцией ПреобразоватьВМассивСтруктур(Коллекция).
// 	ТаймаутФонового - Число - Количество секунд после которого не будут запускаться оставшиеся элементы задания, а процедура завершится.
// 	АдресРезультата - Строка - Адрес временного хранилища, к котрое будет помещен результат работы.
//  НомерКолонкиСОтветом - Число - При вызове процедуры, у нас нет возвращаемого значения, 
//					      но возможно процедура помещает ответ в какой-то из параметров
//                        На вход у нас массив параметров, и в НомерКолонкиСОтветом указан в какой будет помещен ответ
Процедура Поток(ПутьПроцедуры, 
				ЭтоФункция, 
				МассивСтруктурПараметров, // [] из СтруктураПараметровВызова()
				ТаймаутФонового, 
				АдресРезультата,
				НомерКолонкиСОтветом = Неопределено) Экспорт
	
	ВремяНачала = ТекущаяДатаСеанса();
	
	Для Каждого СтруктураПараметров Из МассивСтруктурПараметров Цикл 
	
		МассивСтрокПараметров = Новый Массив;
		МассивПараметров      = СтруктураПараметров.МассивПараметров;
		Для Индекс = 0 По МассивПараметров.Количество() - 1 Цикл
			// Чтобы строка вызова была типа : ПутьПроцедуры(МассивПараметров[0],МассивПараметров[1]...)
			МассивСтрокПараметров.Добавить(СтрШаблон("МассивПараметров[%1]", Индекс));
		КонецЦикла;
		СтрокаПараметров = СтрСоединить(МассивСтрокПараметров, ",");
				
		Если ЭтоФункция Тогда
			СтрокаВызова = СтрШаблон("Ответ = %1(%2);", ПутьПроцедуры, СтрокаПараметров);			
		Иначе
			СтрокаВызова = СтрШаблон("%1(%2);", ПутьПроцедуры, СтрокаПараметров);
		КонецЕсли;
		
		Ответ = Неопределено;
		ВремяНачалаВызова = ТекущаяДатаСеанса();
		Попытка
			// ------ Г Л А В Н О Е ---------
			//@skip-check server-execution-safe-mode
			Выполнить(СтрокаВызова);			
			// -------------
			Если ТранзакцияАктивна() Тогда
				ВызватьИсключение "Выход из процедуры с активной транзакцией";
			КонецЕсли;
						
			Если НЕ ЭтоФункция Тогда
				Если НомерКолонкиСОтветом <> Неопределено Тогда
					Ответ = МассивПараметров[НомерКолонкиСОтветом];
				Иначе
					Ответ = Истина; // просто отработало
				КонецЕсли;
			КонецЕсли;
			
			СтруктураПараметров.Исполнено = Истина;
			СтруктураПараметров.Результат = Ответ;
						
		Исключение
			ОтменитьВсеТранзакции();
			СтруктураПараметров.ПолученоИсключение = Истина;
			Инфо = ИнформацияОбОшибке();
			СтруктураПараметров.Результат = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + "; ";			
			ЗаписьЖурналаРегистрации("хе_многопоточка",
									 УровеньЖурналаРегистрации.Ошибка,,,
									 ПодробноеПредставлениеОшибки(Инфо));
		КонецПопытки;
										 
		СтруктураПараметров.ВремяВыполнения = ТекущаяДатаСеанса() - ВремяНачалаВызова;						 
						
		Если (ТекущаяДатаСеанса() - ВремяНачала) > ТаймаутФонового Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(МассивСтруктурПараметров, АдресРезультата); 
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ТаблицаСФоновымиЗаданиями(КоличествоПотоков = 0)
	
	СписокФоновых = Новый ТаблицаЗначений;
	СписокФоновых.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	СписокФоновых.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(30)));
	СписокФоновых.Колонки.Добавить("ХранилищеРезультата", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(300))); 
	СписокФоновых.Колонки.Добавить("ВремяНачала", Новый ОписаниеТипов("Дата"));
	СписокФоновых.Колонки.Добавить("ВремяОкончания", Новый ОписаниеТипов("Дата"));
	СписокФоновых.Колонки.Добавить("Длительность", Новый ОписаниеТипов("ЧИСЛО"));
	СписокФоновых.Колонки.Добавить("РазмерПорции", Новый ОписаниеТипов("ЧИСЛО"));
	СписокФоновых.Колонки.Добавить("КоличествоИсполненных", Новый ОписаниеТипов("ЧИСЛО"));
	СписокФоновых.Колонки.Добавить("МассивИндексов", Новый ОписаниеТипов("Массив"));
	СписокФоновых.Колонки.Добавить("НомерПотока", Новый ОписаниеТипов("ЧИСЛО"));
	
	Для Индекс = 1 По КоличествоПотоков Цикл
		НоваяСтрока = СписокФоновых.Добавить();
		НоваяСтрока.Статус = "Новый";
	КонецЦикла;
	
	Возврат СписокФоновых;
	
КонецФункции	

Функция СтруктураПараметровВызова(ИсходныйИндекс, МассивПараметров = Неопределено)
	
	Возврат Новый Структура("ИсходныйИндекс,МассивПараметров,ВРаботе,Исполнено,Попытки,Результат,ПолученоИсключение,ВремяВыполнения",
							ИсходныйИндекс,
							МассивПараметров,
							Ложь,
							Ложь,
							0, // количество попыток
							Неопределено,
							Ложь
							);
	
КонецФункции
						
Функция СледующаяПорцияДляОбработки(МассивСтруктурПараметров, КоличествоВПорции, КоличествоПопыток)

	Результат = Новый Структура("ПорцияДанных,МассивИндексов",
								 Новый Массив,
								 Новый Массив);
								 
	ТекущееКоличествоПопыток = 0; // надо как-то разделаять какие данные уже отправлены в обработку, а какие нет
	
	Пока ТекущееКоличествоПопыток < КоличествоПопыток
		 И Результат.ПорцияДанных.Количество() < КоличествоВПорции Цикл
									 
		Для Каждого СтруктураПараметров Из МассивСтруктурПараметров Цикл
			
			Если НЕ СтруктураПараметров.Исполнено
				 И НЕ СтруктураПараметров.ВРаботе 
				 И СтруктураПараметров.Попытки = ТекущееКоличествоПопыток Тогда				 
				 
				СтруктураПараметров.ВРаботе = Истина;
				СтруктураПараметров.Попытки = СтруктураПараметров.Попытки + 1;
				 
				Результат.ПорцияДанных.Добавить(СтруктураПараметров);
				Результат.МассивИндексов.Добавить(СтруктураПараметров.ИсходныйИндекс);
				
				Если Результат.ПорцияДанных.Количество() >= КоличествоВПорции Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
		
		ТекущееКоличествоПопыток = ТекущееКоличествоПопыток + 1;
	
	КонецЦикла;
	
	Возврат Результат;
						
КонецФункции

Функция  ПолучитьНомерСвободногоПотока(СвободныеНомераПотоков, КоличествоПотоков)
	
	Результат = 1;
	
	Для Индекс = 1 По КоличествоПотоков Цикл
		Если СвободныеНомераПотоков[Индекс] Тогда
			СвободныеНомераПотоков[Индекс] = Ложь;
			Результат = Индекс;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтменитьВсеТранзакции()
	
	//@skip-check empty-except-statement
	Попытка
		Пока ТранзакцияАктивна() Цикл
			ОтменитьТранзакцию();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура Пауза(Секунд) Экспорт
	
	Фоновое = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
	
	Если Фоновое = Неопределено Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(Секунд);
		Фоновое = ФоновыеЗадания.Выполнить("хе_Многопоточка.Пауза", Параметры);
	КонецЕсли;
		
	Фоновое.ОжидатьЗавершенияВыполнения(Секунд);
	
КонецПроцедуры

#КонецОбласти

	
#КонецЕсли
