#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает результат get запроса к localhost
// 
// Параметры:
// 	ДлительностьПаузы - Число - Будет подставлено в параметр time get запроса.
// 	ПроцентОтказа - Число - Будет подставлено в параметр crash_persent get запроса.
// 	Таймаут - Число - Таймаут запроса.
// 	Пошалить - Булево - Выбрасывается исключение или выход с незакрытой транзакцией.
// 
// Возвращаемое значение:
// 	Структура - со свойствами:
//     * Ответ - Строка - полученная по запросу, либо текст ошибки
//     * Ошибка - Булево - Истина либо если от сервера получено на 200, либо прочее исключение при запросе.
//
Функция ОтветGetЗапроса(ДлительностьПаузы, ПроцентОтказа, Таймаут, Пошалить = Ложь) Экспорт
	
	Соединение   = Новый HTTPСоединение("localhost", ,  , , ,Таймаут);	
	СтрокаЗапроса = СтрШаблон("/index.php?time=%1&crash_persent=%2", ДлительностьПаузы, ПроцентОтказа);
 	Запрос       = Новый HTTPЗапрос(СтрокаЗапроса);
	
	Попытка
 		Ответ = Соединение.Получить(Запрос);
		Результат = Новый Структура("Ответ, Ошибка", Ответ.ПолучитьТелоКакСтроку(), Ответ.КодСостояния <> 200);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Результат = Новый Структура("Ответ, Ошибка", 
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
									Истина);
		ЗаписьЖурналаРегистрации("httpЗапросы.GetЗапрос", 
								 УровеньЖурналаРегистрации.Ошибка,,,
								 ПодробноеПредставлениеОшибки(ИнфоОбОшибке));
								 
	КонецПопытки;
	
	Если Пошалить Тогда
		Генератор = Новый ГенераторСлучайныхЧисел();
		Если Генератор.СлучайноеЧисло(1, 10) < 6 Тогда
			ВызватьИсключение  "Умышленная шалость";
		Иначе
			НачатьТранзакцию(); // это прям вообще подлость какая-то
		КонецЕсли;
	КонецЕсли;
 
 	Возврат Результат;
	
КонецФункции

// Обертка над функцией ОтветGetЗапроса
// 
Процедура ПроцедураОтветGetЗапроса(ДлительностьПаузы, ПроцентОтказа, Таймаут, Результат) Экспорт
	
	Результат = ОтветGetЗапроса(ДлительностьПаузы, ПроцентОтказа, Таймаут);
	
КонецПроцедуры

// Обработка результата вызова ОтветGetЗапроса из потока.
// 
// Параметры:
// 	НоваяСтрока - Строка, которую нужно заполнить
// 	СтрокаРезультата - Результат вызова ОтветGetЗапроса из потока. См. хе_Многопоточка.СтруктураПараметровВызова 
//
Процедура ОбработатьСтрокуРезультата(НоваяСтрока, СтрокаРезультата) Экспорт
	
	НоваяСтрока.ДлительностьПаузы = СтрокаРезультата.МассивПараметров[0];
	НоваяСтрока.ПроцентОтказа     = СтрокаРезультата.МассивПараметров[1];
	НоваяСтрока.Таймаут           = СтрокаРезультата.МассивПараметров[2];
	НоваяСтрока.Пошалить          = СтрокаРезультата.МассивПараметров[3];
	
	Если СтрокаРезультата.Исполнено И Не СтрокаРезультата.ПолученоИсключение Тогда
		НоваяСтрока.Ошибка = СтрокаРезультата.Результат.Ошибка;
		НоваяСтрока.Ответ  = СтрокаРезультата.Результат.Ответ;
	Иначе
		НоваяСтрока.Ошибка = Истина;
		НоваяСтрока.Ответ  = СтрокаРезультата.Результат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
	
#КонецЕсли